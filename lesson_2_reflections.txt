What happens when you initialize a repository? Why do you need to do it?
-It creates the .git file and sets up all the Git stuff needed

How is the staging area different from the working directory and the repository?What value do you think it offers?
-git status operates on both the working directory, but git add operates on the staging area. The staging area offers an intermediate point so that you can choose what you want to commit

How can you use the staging area to make sure you have one commit per logical change?
-Run git diff to compare what you have in your working directory versus the staging area and see if those changes make sense

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-If you have multiple people working on a project, if you want to add new features.

How do the diagrams help you visualize the branch structure?
-The git repo with all its branches is just a DAG, with arrows pointing in the direction of the parent. That makes it very easy to understand the reachability notion, how the branches are set up, and it'll help when merging to see what the branches have in common

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The new file will contain the changes made by both branches. The diagram makes
it easier to see the new DAG and thus the new path of dependencies

What are the pros and cons of GitÎéÎ÷s automatic merging vs. always doing merges manually?
-Automatic merging can save you time when things are obvious, but merge
 conflicts can be really annoying to resolve
